import java.util.*;

public class Orders {


    static int[][] ORDERS_D_E = {
            /*0: */ {9, 8, 7, 6, 5, 4, 0, 1, 2, 3,},
/*0: */ {9, 8, 7, 6, 5, 4, 0, 1, 3, 2,},
/*0: */ {9, 8, 7, 6, 5, 4, 0, 2, 1, 3,},
/*0: */ {9, 8, 7, 6, 5, 4, 0, 2, 3, 1,},
/*0: */ {9, 8, 7, 6, 5, 4, 0, 3, 1, 2,},
/*0: */ {9, 8, 7, 6, 5, 4, 0, 3, 2, 1,},
/*0: */ {9, 8, 7, 6, 5, 4, 1, 0, 2, 3,},
/*0: */ {9, 8, 7, 6, 5, 4, 1, 0, 3, 2,},
/*0: */ {9, 8, 7, 6, 5, 4, 1, 2, 0, 3,},
/*0: */ {9, 8, 7, 6, 5, 4, 1, 2, 3, 0,},
/*0: */ {9, 8, 7, 6, 5, 4, 1, 3, 0, 2,},
/*0: */ {9, 8, 7, 6, 5, 4, 1, 3, 2, 0,},
/*0: */ {9, 8, 7, 6, 5, 4, 2, 0, 1, 3,},
/*0: */ {9, 8, 7, 6, 5, 4, 2, 0, 3, 1,},
/*0: */ {9, 8, 7, 6, 5, 4, 2, 1, 0, 3,},
/*0: */ {9, 8, 7, 6, 5, 4, 2, 1, 3, 0,},
/*0: */ {9, 8, 7, 6, 5, 4, 2, 3, 0, 1,},
/*0: */ {9, 8, 7, 6, 5, 4, 2, 3, 1, 0,},
/*0: */ {9, 8, 7, 6, 5, 4, 3, 0, 1, 2,},
/*0: */ {9, 8, 7, 6, 5, 4, 3, 0, 2, 1,},
/*0: */ {9, 8, 7, 6, 5, 4, 3, 1, 0, 2,},
/*0: */ {9, 8, 7, 6, 5, 4, 3, 1, 2, 0,},
/*0: */ {9, 8, 7, 6, 5, 4, 3, 2, 0, 1,},
/*0: */ {9, 8, 7, 6, 5, 4, 3, 2, 1, 0,},
/*5: */ {4, 0, 3, 9, 8, 1, 2, 7, 6, 5,},
/*5: */ {4, 0, 3, 9, 8, 1, 7, 2, 6, 5,},
/*5: */ {4, 0, 3, 9, 8, 1, 7, 6, 2, 5,},
/*5: */ {4, 0, 3, 9, 8, 1, 7, 6, 5, 2,},
/*5: */ {4, 0, 3, 9, 8, 2, 1, 7, 6, 5,},
/*5: */ {4, 0, 3, 9, 8, 2, 7, 1, 6, 5,},
/*5: */ {4, 0, 3, 9, 8, 2, 7, 6, 1, 5,},
/*5: */ {4, 0, 3, 9, 8, 2, 7, 6, 5, 1,},
/*5: */ {4, 0, 3, 9, 8, 7, 1, 2, 6, 5,},
/*5: */ {4, 0, 3, 9, 8, 7, 1, 6, 2, 5,},
/*5: */ {4, 0, 3, 9, 8, 7, 1, 6, 5, 2,},
/*5: */ {4, 0, 3, 9, 8, 7, 2, 1, 6, 5,},
/*5: */ {4, 0, 3, 9, 8, 7, 2, 6, 1, 5,},
/*5: */ {4, 0, 3, 9, 8, 7, 2, 6, 5, 1,},
/*5: */ {4, 0, 3, 9, 8, 7, 6, 1, 2, 5,},
/*5: */ {4, 0, 3, 9, 8, 7, 6, 1, 5, 2,},
/*5: */ {4, 0, 3, 9, 8, 7, 6, 2, 1, 5,},
/*5: */ {4, 0, 3, 9, 8, 7, 6, 2, 5, 1,},
/*5: */ {4, 0, 3, 9, 8, 7, 6, 5, 1, 2,},
/*5: */ {4, 0, 3, 9, 8, 7, 6, 5, 2, 1,},
/*5: */ {4, 3, 0, 9, 8, 1, 2, 7, 6, 5,},
/*5: */ {4, 3, 0, 9, 8, 1, 7, 2, 6, 5,},
/*5: */ {4, 3, 0, 9, 8, 1, 7, 6, 2, 5,},
/*5: */ {4, 3, 0, 9, 8, 1, 7, 6, 5, 2,},
/*5: */ {4, 3, 0, 9, 8, 2, 1, 7, 6, 5,},
/*5: */ {4, 3, 0, 9, 8, 2, 7, 1, 6, 5,},
/*5: */ {4, 3, 0, 9, 8, 2, 7, 6, 1, 5,},
/*5: */ {4, 3, 0, 9, 8, 2, 7, 6, 5, 1,},
/*5: */ {4, 3, 0, 9, 8, 7, 1, 2, 6, 5,},
/*5: */ {4, 3, 0, 9, 8, 7, 1, 6, 2, 5,},
/*5: */ {4, 3, 0, 9, 8, 7, 1, 6, 5, 2,},
/*5: */ {4, 3, 0, 9, 8, 7, 2, 1, 6, 5,},
/*5: */ {4, 3, 0, 9, 8, 7, 2, 6, 1, 5,},
/*5: */ {4, 3, 0, 9, 8, 7, 2, 6, 5, 1,},
/*5: */ {4, 3, 0, 9, 8, 7, 6, 1, 2, 5,},
/*5: */ {4, 3, 0, 9, 8, 7, 6, 1, 5, 2,},
/*5: */ {4, 3, 0, 9, 8, 7, 6, 2, 1, 5,},
/*5: */ {4, 3, 0, 9, 8, 7, 6, 2, 5, 1,},
/*5: */ {4, 3, 0, 9, 8, 7, 6, 5, 1, 2,},
/*5: */ {4, 3, 0, 9, 8, 7, 6, 5, 2, 1,},
/*5: */ {4, 3, 9, 0, 8, 1, 2, 7, 6, 5,},
/*5: */ {4, 3, 9, 0, 8, 1, 7, 2, 6, 5,},
/*5: */ {4, 3, 9, 0, 8, 1, 7, 6, 2, 5,},
/*5: */ {4, 3, 9, 0, 8, 1, 7, 6, 5, 2,},
/*5: */ {4, 3, 9, 0, 8, 2, 1, 7, 6, 5,},
/*5: */ {4, 3, 9, 0, 8, 2, 7, 1, 6, 5,},
/*5: */ {4, 3, 9, 0, 8, 2, 7, 6, 1, 5,},
/*5: */ {4, 3, 9, 0, 8, 2, 7, 6, 5, 1,},
/*5: */ {4, 3, 9, 0, 8, 7, 1, 2, 6, 5,},
/*5: */ {4, 3, 9, 0, 8, 7, 1, 6, 2, 5,},
/*5: */ {4, 3, 9, 0, 8, 7, 1, 6, 5, 2,},
/*5: */ {4, 3, 9, 0, 8, 7, 2, 1, 6, 5,},
/*5: */ {4, 3, 9, 0, 8, 7, 2, 6, 1, 5,},
/*5: */ {4, 3, 9, 0, 8, 7, 2, 6, 5, 1,},
/*5: */ {4, 3, 9, 0, 8, 7, 6, 1, 2, 5,},
/*5: */ {4, 3, 9, 0, 8, 7, 6, 1, 5, 2,},
/*5: */ {4, 3, 9, 0, 8, 7, 6, 2, 1, 5,},
/*5: */ {4, 3, 9, 0, 8, 7, 6, 2, 5, 1,},
/*5: */ {4, 3, 9, 0, 8, 7, 6, 5, 1, 2,},
/*5: */ {4, 3, 9, 0, 8, 7, 6, 5, 2, 1,},
/*3: */ {6, 5, 4, 3, 9, 0, 1, 2, 8, 7,},
/*3: */ {6, 5, 4, 3, 9, 0, 1, 8, 2, 7,},
/*3: */ {6, 5, 4, 3, 9, 0, 1, 8, 7, 2,},
/*3: */ {6, 5, 4, 3, 9, 0, 2, 1, 8, 7,},
/*3: */ {6, 5, 4, 3, 9, 0, 2, 8, 1, 7,},
/*3: */ {6, 5, 4, 3, 9, 0, 2, 8, 7, 1,},
/*3: */ {6, 5, 4, 3, 9, 0, 8, 1, 2, 7,},
/*3: */ {6, 5, 4, 3, 9, 0, 8, 1, 7, 2,},
/*3: */ {6, 5, 4, 3, 9, 0, 8, 2, 1, 7,},
/*3: */ {6, 5, 4, 3, 9, 0, 8, 2, 7, 1,},
/*3: */ {6, 5, 4, 3, 9, 0, 8, 7, 1, 2,},
/*3: */ {6, 5, 4, 3, 9, 0, 8, 7, 2, 1,},
/*3: */ {6, 5, 4, 3, 9, 1, 0, 2, 8, 7,},
/*3: */ {6, 5, 4, 3, 9, 1, 0, 8, 2, 7,},
/*3: */ {6, 5, 4, 3, 9, 1, 0, 8, 7, 2,},
/*3: */ {6, 5, 4, 3, 9, 1, 2, 0, 8, 7,},
/*3: */ {6, 5, 4, 3, 9, 2, 0, 1, 8, 7,},
/*3: */ {6, 5, 4, 3, 9, 2, 0, 8, 1, 7,},
/*3: */ {6, 5, 4, 3, 9, 2, 0, 8, 7, 1,},
/*3: */ {6, 5, 4, 3, 9, 2, 1, 0, 8, 7,},
/*4: */ {5, 4, 2, 3, 9, 0, 1, 8, 7, 6,},
/*4: */ {5, 4, 2, 3, 9, 0, 8, 1, 7, 6,},
/*4: */ {5, 4, 2, 3, 9, 0, 8, 7, 1, 6,},
/*4: */ {5, 4, 2, 3, 9, 0, 8, 7, 6, 1,},
/*4: */ {5, 4, 2, 3, 9, 1, 0, 8, 7, 6,},
/*4: */ {5, 4, 3, 2, 9, 0, 1, 8, 7, 6,},
/*4: */ {5, 4, 3, 2, 9, 0, 8, 1, 7, 6,},
/*4: */ {5, 4, 3, 2, 9, 0, 8, 7, 1, 6,},
/*4: */ {5, 4, 3, 2, 9, 0, 8, 7, 6, 1,},
/*4: */ {5, 4, 3, 2, 9, 1, 0, 8, 7, 6,},
/*4: */ {5, 4, 3, 9, 2, 0, 1, 8, 7, 6,},
/*4: */ {5, 4, 3, 9, 2, 0, 8, 1, 7, 6,},
/*4: */ {5, 4, 3, 9, 2, 0, 8, 7, 1, 6,},
/*4: */ {5, 4, 3, 9, 2, 0, 8, 7, 6, 1,},
/*4: */ {5, 4, 3, 9, 2, 1, 0, 8, 7, 6,},
/*4: */ {5, 4, 1, 3, 9, 0, 2, 8, 7, 6,},
/*4: */ {5, 4, 1, 3, 9, 0, 8, 2, 7, 6,},
/*4: */ {5, 4, 1, 3, 9, 0, 8, 7, 2, 6,},
/*4: */ {5, 4, 1, 3, 9, 0, 8, 7, 6, 2,},
/*4: */ {5, 4, 1, 3, 9, 2, 0, 8, 7, 6,},
/*4: */ {5, 4, 3, 1, 9, 0, 2, 8, 7, 6,},
/*4: */ {5, 4, 3, 1, 9, 0, 8, 2, 7, 6,},
/*4: */ {5, 4, 3, 1, 9, 0, 8, 7, 2, 6,},
/*4: */ {5, 4, 3, 1, 9, 0, 8, 7, 6, 2,},
/*4: */ {5, 4, 3, 1, 9, 2, 0, 8, 7, 6,},
/*4: */ {5, 4, 3, 9, 1, 0, 2, 8, 7, 6,},
/*4: */ {5, 4, 3, 9, 1, 0, 8, 2, 7, 6,},
/*4: */ {5, 4, 3, 9, 1, 0, 8, 7, 2, 6,},
/*4: */ {5, 4, 3, 9, 1, 0, 8, 7, 6, 2,},
/*4: */ {5, 4, 3, 9, 1, 2, 0, 8, 7, 6,},
/*4: */ {5, 4, 0, 3, 9, 1, 2, 8, 7, 6,},
/*4: */ {5, 4, 0, 3, 9, 1, 8, 2, 7, 6,},
/*4: */ {5, 4, 0, 3, 9, 1, 8, 7, 2, 6,},
/*4: */ {5, 4, 0, 3, 9, 1, 8, 7, 6, 2,},
/*4: */ {5, 4, 0, 3, 9, 2, 1, 8, 7, 6,},
/*4: */ {5, 4, 0, 3, 9, 2, 8, 1, 7, 6,},
/*4: */ {5, 4, 0, 3, 9, 2, 8, 7, 1, 6,},
/*4: */ {5, 4, 0, 3, 9, 2, 8, 7, 6, 1,},
/*4: */ {5, 4, 0, 3, 9, 8, 1, 2, 7, 6,},
/*4: */ {5, 4, 0, 3, 9, 8, 1, 7, 2, 6,},
/*4: */ {5, 4, 0, 3, 9, 8, 1, 7, 6, 2,},
/*4: */ {5, 4, 0, 3, 9, 8, 2, 1, 7, 6,},
/*4: */ {5, 4, 0, 3, 9, 8, 2, 7, 1, 6,},
/*4: */ {5, 4, 0, 3, 9, 8, 2, 7, 6, 1,},
/*4: */ {5, 4, 0, 3, 9, 8, 7, 1, 2, 6,},
/*4: */ {5, 4, 0, 3, 9, 8, 7, 1, 6, 2,},
/*4: */ {5, 4, 0, 3, 9, 8, 7, 2, 1, 6,},
/*4: */ {5, 4, 0, 3, 9, 8, 7, 2, 6, 1,},
/*4: */ {5, 4, 0, 3, 9, 8, 7, 6, 1, 2,},
/*4: */ {5, 4, 0, 3, 9, 8, 7, 6, 2, 1,},
/*4: */ {5, 4, 3, 0, 9, 1, 2, 8, 7, 6,},
/*4: */ {5, 4, 3, 0, 9, 1, 8, 2, 7, 6,},
/*4: */ {5, 4, 3, 0, 9, 1, 8, 7, 2, 6,},
/*4: */ {5, 4, 3, 0, 9, 1, 8, 7, 6, 2,},
/*4: */ {5, 4, 3, 0, 9, 2, 1, 8, 7, 6,},
/*4: */ {5, 4, 3, 0, 9, 2, 8, 1, 7, 6,},
/*4: */ {5, 4, 3, 0, 9, 2, 8, 7, 1, 6,},
/*4: */ {5, 4, 3, 0, 9, 2, 8, 7, 6, 1,},
/*4: */ {5, 4, 3, 0, 9, 8, 1, 2, 7, 6,},
/*4: */ {5, 4, 3, 0, 9, 8, 1, 7, 2, 6,},
/*4: */ {5, 4, 3, 0, 9, 8, 1, 7, 6, 2,},
/*4: */ {5, 4, 3, 0, 9, 8, 2, 1, 7, 6,},
/*4: */ {5, 4, 3, 0, 9, 8, 2, 7, 1, 6,},
/*4: */ {5, 4, 3, 0, 9, 8, 2, 7, 6, 1,},
/*4: */ {5, 4, 3, 0, 9, 8, 7, 1, 2, 6,},
/*4: */ {5, 4, 3, 0, 9, 8, 7, 1, 6, 2,},
/*4: */ {5, 4, 3, 0, 9, 8, 7, 2, 1, 6,},
/*4: */ {5, 4, 3, 0, 9, 8, 7, 2, 6, 1,},
/*4: */ {5, 4, 3, 0, 9, 8, 7, 6, 1, 2,},
/*4: */ {5, 4, 3, 0, 9, 8, 7, 6, 2, 1,},
/*4: */ {5, 4, 3, 9, 0, 1, 2, 8, 7, 6,},
/*4: */ {5, 4, 3, 9, 0, 1, 8, 2, 7, 6,},
/*4: */ {5, 4, 3, 9, 0, 1, 8, 7, 2, 6,},
/*4: */ {5, 4, 3, 9, 0, 1, 8, 7, 6, 2,},
/*4: */ {5, 4, 3, 9, 0, 2, 1, 8, 7, 6,},
/*4: */ {5, 4, 3, 9, 0, 2, 8, 1, 7, 6,},
/*4: */ {5, 4, 3, 9, 0, 2, 8, 7, 1, 6,},
/*4: */ {5, 4, 3, 9, 0, 2, 8, 7, 6, 1,},
/*4: */ {5, 4, 3, 9, 0, 8, 1, 2, 7, 6,},
/*4: */ {5, 4, 3, 9, 0, 8, 1, 7, 2, 6,},
/*4: */ {5, 4, 3, 9, 0, 8, 1, 7, 6, 2,},
/*4: */ {5, 4, 3, 9, 0, 8, 2, 1, 7, 6,},
/*4: */ {5, 4, 3, 9, 0, 8, 2, 7, 1, 6,},
/*4: */ {5, 4, 3, 9, 0, 8, 2, 7, 6, 1,},
/*4: */ {5, 4, 3, 9, 0, 8, 7, 1, 2, 6,},
/*4: */ {5, 4, 3, 9, 0, 8, 7, 1, 6, 2,},
/*4: */ {5, 4, 3, 9, 0, 8, 7, 2, 1, 6,},
/*4: */ {5, 4, 3, 9, 0, 8, 7, 2, 6, 1,},
/*4: */ {5, 4, 3, 9, 0, 8, 7, 6, 1, 2,},
/*4: */ {5, 4, 3, 9, 0, 8, 7, 6, 2, 1,},
/*5: */ {4, 1, 2, 3, 9, 0, 8, 7, 6, 5,},
/*5: */ {4, 1, 3, 2, 9, 0, 8, 7, 6, 5,},
/*5: */ {4, 1, 3, 9, 2, 0, 8, 7, 6, 5,},
/*5: */ {4, 2, 1, 3, 9, 0, 8, 7, 6, 5,},
/*5: */ {4, 2, 3, 1, 9, 0, 8, 7, 6, 5,},
/*5: */ {4, 2, 3, 9, 1, 0, 8, 7, 6, 5,},
/*5: */ {4, 3, 1, 2, 9, 0, 8, 7, 6, 5,},
/*5: */ {4, 3, 1, 9, 2, 0, 8, 7, 6, 5,},
/*5: */ {4, 3, 2, 1, 9, 0, 8, 7, 6, 5,},
/*5: */ {4, 3, 2, 9, 1, 0, 8, 7, 6, 5,},
/*5: */ {4, 3, 9, 1, 2, 0, 8, 7, 6, 5,},
/*5: */ {4, 3, 9, 2, 1, 0, 8, 7, 6, 5,},
/*5: */ {4, 0, 2, 3, 9, 1, 8, 7, 6, 5,},
/*5: */ {4, 0, 2, 3, 9, 8, 1, 7, 6, 5,},
/*5: */ {4, 0, 2, 3, 9, 8, 7, 1, 6, 5,},
/*5: */ {4, 0, 2, 3, 9, 8, 7, 6, 1, 5,},
/*5: */ {4, 0, 2, 3, 9, 8, 7, 6, 5, 1,},
/*5: */ {4, 0, 3, 2, 9, 1, 8, 7, 6, 5,},
/*5: */ {4, 0, 3, 2, 9, 8, 1, 7, 6, 5,},
/*5: */ {4, 0, 3, 2, 9, 8, 7, 1, 6, 5,},
/*5: */ {4, 0, 3, 2, 9, 8, 7, 6, 1, 5,},
/*5: */ {4, 0, 3, 2, 9, 8, 7, 6, 5, 1,},
/*5: */ {4, 0, 3, 9, 2, 1, 8, 7, 6, 5,},
/*5: */ {4, 0, 3, 9, 2, 8, 1, 7, 6, 5,},
/*5: */ {4, 0, 3, 9, 2, 8, 7, 1, 6, 5,},
/*5: */ {4, 0, 3, 9, 2, 8, 7, 6, 1, 5,},
/*5: */ {4, 0, 3, 9, 2, 8, 7, 6, 5, 1,},
/*5: */ {4, 2, 0, 3, 9, 1, 8, 7, 6, 5,},
/*5: */ {4, 2, 0, 3, 9, 8, 1, 7, 6, 5,},
/*5: */ {4, 2, 0, 3, 9, 8, 7, 1, 6, 5,},
/*5: */ {4, 2, 0, 3, 9, 8, 7, 6, 1, 5,},
/*5: */ {4, 2, 0, 3, 9, 8, 7, 6, 5, 1,},
/*5: */ {4, 2, 3, 0, 9, 1, 8, 7, 6, 5,},
/*5: */ {4, 2, 3, 0, 9, 8, 1, 7, 6, 5,},
/*5: */ {4, 2, 3, 0, 9, 8, 7, 1, 6, 5,},
/*5: */ {4, 2, 3, 0, 9, 8, 7, 6, 1, 5,},
/*5: */ {4, 2, 3, 0, 9, 8, 7, 6, 5, 1,},
/*5: */ {4, 2, 3, 9, 0, 1, 8, 7, 6, 5,},
/*5: */ {4, 2, 3, 9, 0, 8, 1, 7, 6, 5,},
/*5: */ {4, 2, 3, 9, 0, 8, 7, 1, 6, 5,},
/*5: */ {4, 2, 3, 9, 0, 8, 7, 6, 1, 5,},
/*5: */ {4, 2, 3, 9, 0, 8, 7, 6, 5, 1,},
/*5: */ {4, 3, 0, 2, 9, 1, 8, 7, 6, 5,},
/*5: */ {4, 3, 0, 2, 9, 8, 1, 7, 6, 5,},
/*5: */ {4, 3, 0, 2, 9, 8, 7, 1, 6, 5,},
/*5: */ {4, 3, 0, 2, 9, 8, 7, 6, 1, 5,},
/*5: */ {4, 3, 0, 2, 9, 8, 7, 6, 5, 1,},
/*5: */ {4, 3, 0, 9, 2, 1, 8, 7, 6, 5,},
/*5: */ {4, 3, 0, 9, 2, 8, 1, 7, 6, 5,},
/*5: */ {4, 3, 0, 9, 2, 8, 7, 1, 6, 5,},
/*5: */ {4, 3, 0, 9, 2, 8, 7, 6, 1, 5,},
/*5: */ {4, 3, 0, 9, 2, 8, 7, 6, 5, 1,},
/*5: */ {4, 3, 2, 0, 9, 1, 8, 7, 6, 5,},
/*5: */ {4, 3, 2, 0, 9, 8, 1, 7, 6, 5,},
/*5: */ {4, 3, 2, 0, 9, 8, 7, 1, 6, 5,},
/*5: */ {4, 3, 2, 0, 9, 8, 7, 6, 1, 5,},
/*5: */ {4, 3, 2, 0, 9, 8, 7, 6, 5, 1,},
/*5: */ {4, 3, 2, 9, 0, 1, 8, 7, 6, 5,},
/*5: */ {4, 3, 2, 9, 0, 8, 1, 7, 6, 5,},
/*5: */ {4, 3, 2, 9, 0, 8, 7, 1, 6, 5,},
/*5: */ {4, 3, 2, 9, 0, 8, 7, 6, 1, 5,},
/*5: */ {4, 3, 2, 9, 0, 8, 7, 6, 5, 1,},
/*5: */ {4, 3, 9, 0, 2, 1, 8, 7, 6, 5,},
/*5: */ {4, 3, 9, 0, 2, 8, 1, 7, 6, 5,},
/*5: */ {4, 3, 9, 0, 2, 8, 7, 1, 6, 5,},
/*5: */ {4, 3, 9, 0, 2, 8, 7, 6, 1, 5,},
/*5: */ {4, 3, 9, 0, 2, 8, 7, 6, 5, 1,},
/*5: */ {4, 3, 9, 2, 0, 1, 8, 7, 6, 5,},
/*5: */ {4, 3, 9, 2, 0, 8, 1, 7, 6, 5,},
/*5: */ {4, 3, 9, 2, 0, 8, 7, 1, 6, 5,},
/*5: */ {4, 3, 9, 2, 0, 8, 7, 6, 1, 5,},
/*5: */ {4, 3, 9, 2, 0, 8, 7, 6, 5, 1,},
/*5: */ {4, 0, 1, 3, 9, 2, 8, 7, 6, 5,},
/*5: */ {4, 0, 1, 3, 9, 8, 2, 7, 6, 5,},
/*5: */ {4, 0, 1, 3, 9, 8, 7, 2, 6, 5,},
/*5: */ {4, 0, 1, 3, 9, 8, 7, 6, 2, 5,},
/*5: */ {4, 0, 1, 3, 9, 8, 7, 6, 5, 2,},
/*5: */ {4, 0, 3, 1, 9, 2, 8, 7, 6, 5,},
/*5: */ {4, 0, 3, 1, 9, 8, 2, 7, 6, 5,},
/*5: */ {4, 0, 3, 1, 9, 8, 7, 2, 6, 5,},
/*5: */ {4, 0, 3, 1, 9, 8, 7, 6, 2, 5,},
/*5: */ {4, 0, 3, 1, 9, 8, 7, 6, 5, 2,},
/*5: */ {4, 0, 3, 9, 1, 2, 8, 7, 6, 5,},
/*5: */ {4, 0, 3, 9, 1, 8, 2, 7, 6, 5,},
/*5: */ {4, 0, 3, 9, 1, 8, 7, 2, 6, 5,},
/*5: */ {4, 0, 3, 9, 1, 8, 7, 6, 2, 5,},
/*5: */ {4, 0, 3, 9, 1, 8, 7, 6, 5, 2,},
/*5: */ {4, 1, 0, 3, 9, 2, 8, 7, 6, 5,},
/*5: */ {4, 1, 0, 3, 9, 8, 2, 7, 6, 5,},
/*5: */ {4, 1, 0, 3, 9, 8, 7, 2, 6, 5,},
/*5: */ {4, 1, 0, 3, 9, 8, 7, 6, 2, 5,},
/*5: */ {4, 1, 0, 3, 9, 8, 7, 6, 5, 2,},
/*5: */ {4, 1, 3, 0, 9, 2, 8, 7, 6, 5,},
/*5: */ {4, 1, 3, 0, 9, 8, 2, 7, 6, 5,},
/*5: */ {4, 1, 3, 0, 9, 8, 7, 2, 6, 5,},
/*5: */ {4, 1, 3, 0, 9, 8, 7, 6, 2, 5,},
/*5: */ {4, 1, 3, 0, 9, 8, 7, 6, 5, 2,},
/*5: */ {4, 1, 3, 9, 0, 2, 8, 7, 6, 5,},
/*5: */ {4, 1, 3, 9, 0, 8, 2, 7, 6, 5,},
/*5: */ {4, 1, 3, 9, 0, 8, 7, 2, 6, 5,},
/*5: */ {4, 1, 3, 9, 0, 8, 7, 6, 2, 5,},
/*5: */ {4, 1, 3, 9, 0, 8, 7, 6, 5, 2,},
/*5: */ {4, 3, 0, 1, 9, 2, 8, 7, 6, 5,},
/*5: */ {4, 3, 0, 1, 9, 8, 2, 7, 6, 5,},
/*5: */ {4, 3, 0, 1, 9, 8, 7, 2, 6, 5,},
/*5: */ {4, 3, 0, 1, 9, 8, 7, 6, 2, 5,},
/*5: */ {4, 3, 0, 1, 9, 8, 7, 6, 5, 2,},
/*5: */ {4, 3, 0, 9, 1, 2, 8, 7, 6, 5,},
/*5: */ {4, 3, 0, 9, 1, 8, 2, 7, 6, 5,},
/*5: */ {4, 3, 0, 9, 1, 8, 7, 2, 6, 5,},
/*5: */ {4, 3, 0, 9, 1, 8, 7, 6, 2, 5,},
/*5: */ {4, 3, 0, 9, 1, 8, 7, 6, 5, 2,},
/*5: */ {4, 3, 1, 0, 9, 2, 8, 7, 6, 5,},
/*5: */ {4, 3, 1, 0, 9, 8, 2, 7, 6, 5,},
/*5: */ {4, 3, 1, 0, 9, 8, 7, 2, 6, 5,},
/*5: */ {4, 3, 1, 0, 9, 8, 7, 6, 2, 5,},
/*5: */ {4, 3, 1, 0, 9, 8, 7, 6, 5, 2,},
/*5: */ {4, 3, 1, 9, 0, 2, 8, 7, 6, 5,},
/*5: */ {4, 3, 1, 9, 0, 8, 2, 7, 6, 5,},
/*5: */ {4, 3, 1, 9, 0, 8, 7, 2, 6, 5,},
/*5: */ {4, 3, 1, 9, 0, 8, 7, 6, 2, 5,},
/*5: */ {4, 3, 1, 9, 0, 8, 7, 6, 5, 2,},
/*5: */ {4, 3, 9, 0, 1, 2, 8, 7, 6, 5,},
/*5: */ {4, 3, 9, 0, 1, 8, 2, 7, 6, 5,},
/*5: */ {4, 3, 9, 0, 1, 8, 7, 2, 6, 5,},
/*5: */ {4, 3, 9, 0, 1, 8, 7, 6, 2, 5,},
/*5: */ {4, 3, 9, 0, 1, 8, 7, 6, 5, 2,},
/*5: */ {4, 3, 9, 1, 0, 2, 8, 7, 6, 5,},
/*5: */ {4, 3, 9, 1, 0, 8, 2, 7, 6, 5,},
/*5: */ {4, 3, 9, 1, 0, 8, 7, 2, 6, 5,},
/*5: */ {4, 3, 9, 1, 0, 8, 7, 6, 2, 5,},
/*5: */ {4, 3, 9, 1, 0, 8, 7, 6, 5, 2,},
/*1: */ {8, 7, 6, 5, 4, 0, 1, 2, 3, 9,},
/*1: */ {8, 7, 6, 5, 4, 0, 1, 3, 2, 9,},
/*1: */ {8, 7, 6, 5, 4, 0, 1, 3, 9, 2,},
/*1: */ {8, 7, 6, 5, 4, 0, 2, 1, 3, 9,},
/*1: */ {8, 7, 6, 5, 4, 0, 2, 3, 1, 9,},
/*1: */ {8, 7, 6, 5, 4, 0, 2, 3, 9, 1,},
/*1: */ {8, 7, 6, 5, 4, 0, 3, 1, 2, 9,},
/*1: */ {8, 7, 6, 5, 4, 0, 3, 1, 9, 2,},
/*1: */ {8, 7, 6, 5, 4, 0, 3, 2, 1, 9,},
/*1: */ {8, 7, 6, 5, 4, 0, 3, 2, 9, 1,},
/*1: */ {8, 7, 6, 5, 4, 0, 3, 9, 1, 2,},
/*1: */ {8, 7, 6, 5, 4, 0, 3, 9, 2, 1,},
/*1: */ {8, 7, 6, 5, 4, 1, 0, 2, 3, 9,},
/*1: */ {8, 7, 6, 5, 4, 1, 0, 3, 2, 9,},
/*1: */ {8, 7, 6, 5, 4, 1, 0, 3, 9, 2,},
/*1: */ {8, 7, 6, 5, 4, 1, 2, 0, 3, 9,},
/*1: */ {8, 7, 6, 5, 4, 1, 2, 3, 0, 9,},
/*1: */ {8, 7, 6, 5, 4, 1, 2, 3, 9, 0,},
/*1: */ {8, 7, 6, 5, 4, 1, 3, 0, 2, 9,},
/*1: */ {8, 7, 6, 5, 4, 1, 3, 0, 9, 2,},
/*1: */ {8, 7, 6, 5, 4, 1, 3, 2, 0, 9,},
/*1: */ {8, 7, 6, 5, 4, 1, 3, 2, 9, 0,},
/*1: */ {8, 7, 6, 5, 4, 1, 3, 9, 0, 2,},
/*1: */ {8, 7, 6, 5, 4, 1, 3, 9, 2, 0,},
/*1: */ {8, 7, 6, 5, 4, 2, 0, 1, 3, 9,},
/*1: */ {8, 7, 6, 5, 4, 2, 0, 3, 1, 9,},
/*1: */ {8, 7, 6, 5, 4, 2, 0, 3, 9, 1,},
/*1: */ {8, 7, 6, 5, 4, 2, 1, 0, 3, 9,},
/*1: */ {8, 7, 6, 5, 4, 2, 1, 3, 0, 9,},
/*1: */ {8, 7, 6, 5, 4, 2, 1, 3, 9, 0,},
/*1: */ {8, 7, 6, 5, 4, 2, 3, 0, 1, 9,},
/*1: */ {8, 7, 6, 5, 4, 2, 3, 0, 9, 1,},
/*1: */ {8, 7, 6, 5, 4, 2, 3, 1, 0, 9,},
/*1: */ {8, 7, 6, 5, 4, 2, 3, 1, 9, 0,},
/*1: */ {8, 7, 6, 5, 4, 2, 3, 9, 0, 1,},
/*1: */ {8, 7, 6, 5, 4, 2, 3, 9, 1, 0,},
/*1: */ {8, 7, 6, 5, 4, 3, 0, 1, 2, 9,},
/*1: */ {8, 7, 6, 5, 4, 3, 0, 1, 9, 2,},
/*1: */ {8, 7, 6, 5, 4, 3, 0, 2, 1, 9,},
/*1: */ {8, 7, 6, 5, 4, 3, 0, 2, 9, 1,},
/*1: */ {8, 7, 6, 5, 4, 3, 0, 9, 1, 2,},
/*1: */ {8, 7, 6, 5, 4, 3, 0, 9, 2, 1,},
/*1: */ {8, 7, 6, 5, 4, 3, 1, 0, 2, 9,},
/*1: */ {8, 7, 6, 5, 4, 3, 1, 0, 9, 2,},
/*1: */ {8, 7, 6, 5, 4, 3, 1, 2, 0, 9,},
/*1: */ {8, 7, 6, 5, 4, 3, 1, 2, 9, 0,},
/*1: */ {8, 7, 6, 5, 4, 3, 1, 9, 0, 2,},
/*1: */ {8, 7, 6, 5, 4, 3, 1, 9, 2, 0,},
/*1: */ {8, 7, 6, 5, 4, 3, 2, 0, 1, 9,},
/*1: */ {8, 7, 6, 5, 4, 3, 2, 0, 9, 1,},
/*1: */ {8, 7, 6, 5, 4, 3, 2, 1, 0, 9,},
/*1: */ {8, 7, 6, 5, 4, 3, 2, 1, 9, 0,},
/*1: */ {8, 7, 6, 5, 4, 3, 2, 9, 0, 1,},
/*1: */ {8, 7, 6, 5, 4, 3, 2, 9, 1, 0,},
/*1: */ {8, 7, 6, 5, 4, 3, 9, 0, 1, 2,},
/*1: */ {8, 7, 6, 5, 4, 3, 9, 0, 2, 1,},
/*1: */ {8, 7, 6, 5, 4, 3, 9, 1, 0, 2,},
/*1: */ {8, 7, 6, 5, 4, 3, 9, 1, 2, 0,},
/*1: */ {8, 7, 6, 5, 4, 3, 9, 2, 0, 1,},
/*1: */ {8, 7, 6, 5, 4, 3, 9, 2, 1, 0,},
/*2: */ {7, 6, 5, 4, 3, 0, 1, 2, 9, 8,},
/*2: */ {7, 6, 5, 4, 3, 0, 1, 9, 2, 8,},
/*2: */ {7, 6, 5, 4, 3, 0, 1, 9, 8, 2,},
/*2: */ {7, 6, 5, 4, 3, 0, 2, 1, 9, 8,},
/*2: */ {7, 6, 5, 4, 3, 0, 2, 9, 1, 8,},
/*2: */ {7, 6, 5, 4, 3, 0, 2, 9, 8, 1,},
/*2: */ {7, 6, 5, 4, 3, 0, 9, 1, 2, 8,},
/*2: */ {7, 6, 5, 4, 3, 0, 9, 1, 8, 2,},
/*2: */ {7, 6, 5, 4, 3, 0, 9, 2, 1, 8,},
/*2: */ {7, 6, 5, 4, 3, 0, 9, 2, 8, 1,},
/*2: */ {7, 6, 5, 4, 3, 0, 9, 8, 1, 2,},
/*2: */ {7, 6, 5, 4, 3, 0, 9, 8, 2, 1,},
/*2: */ {7, 6, 5, 4, 3, 1, 0, 2, 9, 8,},
/*2: */ {7, 6, 5, 4, 3, 1, 0, 9, 2, 8,},
/*2: */ {7, 6, 5, 4, 3, 1, 0, 9, 8, 2,},
/*2: */ {7, 6, 5, 4, 3, 1, 2, 0, 9, 8,},
/*2: */ {7, 6, 5, 4, 3, 1, 2, 9, 0, 8,},
/*2: */ {7, 6, 5, 4, 3, 1, 9, 0, 2, 8,},
/*2: */ {7, 6, 5, 4, 3, 1, 9, 0, 8, 2,},
/*2: */ {7, 6, 5, 4, 3, 1, 9, 2, 0, 8,},
/*2: */ {7, 6, 5, 4, 3, 2, 0, 1, 9, 8,},
/*2: */ {7, 6, 5, 4, 3, 2, 0, 9, 1, 8,},
/*2: */ {7, 6, 5, 4, 3, 2, 0, 9, 8, 1,},
/*2: */ {7, 6, 5, 4, 3, 2, 1, 0, 9, 8,},
/*2: */ {7, 6, 5, 4, 3, 2, 1, 9, 0, 8,},
/*2: */ {7, 6, 5, 4, 3, 2, 9, 0, 1, 8,},
/*2: */ {7, 6, 5, 4, 3, 2, 9, 0, 8, 1,},
/*2: */ {7, 6, 5, 4, 3, 2, 9, 1, 0, 8,},
/*2: */ {7, 6, 5, 4, 3, 9, 0, 1, 2, 8,},
/*2: */ {7, 6, 5, 4, 3, 9, 0, 1, 8, 2,},
/*2: */ {7, 6, 5, 4, 3, 9, 0, 2, 1, 8,},
/*2: */ {7, 6, 5, 4, 3, 9, 0, 2, 8, 1,},
/*2: */ {7, 6, 5, 4, 3, 9, 0, 8, 1, 2,},
/*2: */ {7, 6, 5, 4, 3, 9, 0, 8, 2, 1,},
/*2: */ {7, 6, 5, 4, 3, 9, 1, 0, 2, 8,},
/*2: */ {7, 6, 5, 4, 3, 9, 1, 0, 8, 2,},
/*2: */ {7, 6, 5, 4, 3, 9, 1, 2, 0, 8,},
/*2: */ {7, 6, 5, 4, 3, 9, 2, 0, 1, 8,},
/*2: */ {7, 6, 5, 4, 3, 9, 2, 0, 8, 1,},
/*2: */ {7, 6, 5, 4, 3, 9, 2, 1, 0, 8,},
/*2: */ {7, 6, 5, 4, 2, 0, 1, 3, 9, 8,},
/*2: */ {7, 6, 5, 4, 2, 0, 3, 1, 9, 8,},
/*2: */ {7, 6, 5, 4, 2, 0, 3, 9, 1, 8,},
/*2: */ {7, 6, 5, 4, 2, 0, 3, 9, 8, 1,},
/*2: */ {7, 6, 5, 4, 2, 1, 0, 3, 9, 8,},
/*2: */ {7, 6, 5, 4, 2, 1, 3, 0, 9, 8,},
/*2: */ {7, 6, 5, 4, 2, 1, 3, 9, 0, 8,},
/*2: */ {7, 6, 5, 4, 2, 3, 0, 1, 9, 8,},
/*2: */ {7, 6, 5, 4, 2, 3, 0, 9, 1, 8,},
/*2: */ {7, 6, 5, 4, 2, 3, 0, 9, 8, 1,},
/*2: */ {7, 6, 5, 4, 2, 3, 1, 0, 9, 8,},
/*2: */ {7, 6, 5, 4, 2, 3, 1, 9, 0, 8,},
/*2: */ {7, 6, 5, 4, 2, 3, 9, 0, 1, 8,},
/*2: */ {7, 6, 5, 4, 2, 3, 9, 0, 8, 1,},
/*2: */ {7, 6, 5, 4, 2, 3, 9, 1, 0, 8,},
/*2: */ {7, 6, 5, 4, 1, 0, 2, 3, 9, 8,},
/*2: */ {7, 6, 5, 4, 1, 0, 3, 2, 9, 8,},
/*2: */ {7, 6, 5, 4, 1, 0, 3, 9, 2, 8,},
/*2: */ {7, 6, 5, 4, 1, 0, 3, 9, 8, 2,},
/*2: */ {7, 6, 5, 4, 1, 2, 0, 3, 9, 8,},
/*2: */ {7, 6, 5, 4, 1, 2, 3, 0, 9, 8,},
/*2: */ {7, 6, 5, 4, 1, 2, 3, 9, 0, 8,},
/*2: */ {7, 6, 5, 4, 1, 3, 0, 2, 9, 8,},
/*2: */ {7, 6, 5, 4, 1, 3, 0, 9, 2, 8,},
/*2: */ {7, 6, 5, 4, 1, 3, 0, 9, 8, 2,},
/*2: */ {7, 6, 5, 4, 1, 3, 2, 0, 9, 8,},
/*2: */ {7, 6, 5, 4, 1, 3, 2, 9, 0, 8,},
/*2: */ {7, 6, 5, 4, 1, 3, 9, 0, 2, 8,},
/*2: */ {7, 6, 5, 4, 1, 3, 9, 0, 8, 2,},
/*2: */ {7, 6, 5, 4, 1, 3, 9, 2, 0, 8,},
/*2: */ {7, 6, 5, 4, 0, 1, 2, 3, 9, 8,},
/*2: */ {7, 6, 5, 4, 0, 1, 3, 2, 9, 8,},
/*2: */ {7, 6, 5, 4, 0, 1, 3, 9, 2, 8,},
/*2: */ {7, 6, 5, 4, 0, 1, 3, 9, 8, 2,},
/*2: */ {7, 6, 5, 4, 0, 2, 1, 3, 9, 8,},
/*2: */ {7, 6, 5, 4, 0, 2, 3, 1, 9, 8,},
/*2: */ {7, 6, 5, 4, 0, 2, 3, 9, 1, 8,},
/*2: */ {7, 6, 5, 4, 0, 2, 3, 9, 8, 1,},
/*2: */ {7, 6, 5, 4, 0, 3, 1, 2, 9, 8,},
/*2: */ {7, 6, 5, 4, 0, 3, 1, 9, 2, 8,},
/*2: */ {7, 6, 5, 4, 0, 3, 1, 9, 8, 2,},
/*2: */ {7, 6, 5, 4, 0, 3, 2, 1, 9, 8,},
/*2: */ {7, 6, 5, 4, 0, 3, 2, 9, 1, 8,},
/*2: */ {7, 6, 5, 4, 0, 3, 2, 9, 8, 1,},
/*2: */ {7, 6, 5, 4, 0, 3, 9, 1, 2, 8,},
/*2: */ {7, 6, 5, 4, 0, 3, 9, 1, 8, 2,},
/*2: */ {7, 6, 5, 4, 0, 3, 9, 2, 1, 8,},
/*2: */ {7, 6, 5, 4, 0, 3, 9, 2, 8, 1,},
/*2: */ {7, 6, 5, 4, 0, 3, 9, 8, 1, 2,},
/*2: */ {7, 6, 5, 4, 0, 3, 9, 8, 2, 1,},
/*3: */ {6, 5, 4, 2, 3, 0, 1, 9, 8, 7,},
/*3: */ {6, 5, 4, 2, 3, 0, 9, 1, 8, 7,},
/*3: */ {6, 5, 4, 2, 3, 0, 9, 8, 1, 7,},
/*3: */ {6, 5, 4, 2, 3, 0, 9, 8, 7, 1,},
/*3: */ {6, 5, 4, 2, 3, 1, 0, 9, 8, 7,},
/*3: */ {6, 5, 4, 2, 3, 1, 9, 0, 8, 7,},
/*3: */ {6, 5, 4, 2, 3, 9, 0, 1, 8, 7,},
/*3: */ {6, 5, 4, 2, 3, 9, 0, 8, 1, 7,},
/*3: */ {6, 5, 4, 2, 3, 9, 0, 8, 7, 1,},
/*3: */ {6, 5, 4, 2, 3, 9, 1, 0, 8, 7,},
/*3: */ {6, 5, 4, 3, 2, 0, 1, 9, 8, 7,},
/*3: */ {6, 5, 4, 3, 2, 0, 9, 1, 8, 7,},
/*3: */ {6, 5, 4, 3, 2, 0, 9, 8, 1, 7,},
/*3: */ {6, 5, 4, 3, 2, 0, 9, 8, 7, 1,},
/*3: */ {6, 5, 4, 3, 2, 1, 0, 9, 8, 7,},
/*3: */ {6, 5, 4, 3, 2, 1, 9, 0, 8, 7,},
/*3: */ {6, 5, 4, 3, 2, 9, 0, 1, 8, 7,},
/*3: */ {6, 5, 4, 3, 2, 9, 0, 8, 1, 7,},
/*3: */ {6, 5, 4, 3, 2, 9, 0, 8, 7, 1,},
/*3: */ {6, 5, 4, 3, 2, 9, 1, 0, 8, 7,},
/*3: */ {6, 5, 4, 1, 3, 0, 2, 9, 8, 7,},
/*3: */ {6, 5, 4, 1, 3, 0, 9, 2, 8, 7,},
/*3: */ {6, 5, 4, 1, 3, 0, 9, 8, 2, 7,},
/*3: */ {6, 5, 4, 1, 3, 0, 9, 8, 7, 2,},
/*3: */ {6, 5, 4, 1, 3, 2, 0, 9, 8, 7,},
/*3: */ {6, 5, 4, 1, 3, 2, 9, 0, 8, 7,},
/*3: */ {6, 5, 4, 1, 3, 9, 0, 2, 8, 7,},
/*3: */ {6, 5, 4, 1, 3, 9, 0, 8, 2, 7,},
/*3: */ {6, 5, 4, 1, 3, 9, 0, 8, 7, 2,},
/*3: */ {6, 5, 4, 1, 3, 9, 2, 0, 8, 7,},
/*3: */ {6, 5, 4, 3, 1, 0, 2, 9, 8, 7,},
/*3: */ {6, 5, 4, 3, 1, 0, 9, 2, 8, 7,},
/*3: */ {6, 5, 4, 3, 1, 0, 9, 8, 2, 7,},
/*3: */ {6, 5, 4, 3, 1, 0, 9, 8, 7, 2,},
/*3: */ {6, 5, 4, 3, 1, 2, 0, 9, 8, 7,},
/*3: */ {6, 5, 4, 3, 1, 2, 9, 0, 8, 7,},
/*3: */ {6, 5, 4, 3, 1, 9, 0, 2, 8, 7,},
/*3: */ {6, 5, 4, 3, 1, 9, 0, 8, 2, 7,},
/*3: */ {6, 5, 4, 3, 1, 9, 0, 8, 7, 2,},
/*3: */ {6, 5, 4, 3, 1, 9, 2, 0, 8, 7,},
/*3: */ {6, 5, 4, 0, 3, 1, 2, 9, 8, 7,},
/*3: */ {6, 5, 4, 0, 3, 1, 9, 2, 8, 7,},
/*3: */ {6, 5, 4, 0, 3, 1, 9, 8, 2, 7,},
/*3: */ {6, 5, 4, 0, 3, 1, 9, 8, 7, 2,},
/*3: */ {6, 5, 4, 0, 3, 2, 1, 9, 8, 7,},
/*3: */ {6, 5, 4, 0, 3, 2, 9, 1, 8, 7,},
/*3: */ {6, 5, 4, 0, 3, 2, 9, 8, 1, 7,},
/*3: */ {6, 5, 4, 0, 3, 2, 9, 8, 7, 1,},
/*3: */ {6, 5, 4, 0, 3, 9, 1, 2, 8, 7,},
/*3: */ {6, 5, 4, 0, 3, 9, 1, 8, 2, 7,},
/*3: */ {6, 5, 4, 0, 3, 9, 1, 8, 7, 2,},
/*3: */ {6, 5, 4, 0, 3, 9, 2, 1, 8, 7,},
/*3: */ {6, 5, 4, 0, 3, 9, 2, 8, 1, 7,},
/*3: */ {6, 5, 4, 0, 3, 9, 2, 8, 7, 1,},
/*3: */ {6, 5, 4, 0, 3, 9, 8, 1, 2, 7,},
/*3: */ {6, 5, 4, 0, 3, 9, 8, 1, 7, 2,},
/*3: */ {6, 5, 4, 0, 3, 9, 8, 2, 1, 7,},
/*3: */ {6, 5, 4, 0, 3, 9, 8, 2, 7, 1,},
/*3: */ {6, 5, 4, 0, 3, 9, 8, 7, 1, 2,},
/*3: */ {6, 5, 4, 0, 3, 9, 8, 7, 2, 1,},
/*3: */ {6, 5, 4, 3, 0, 1, 2, 9, 8, 7,},
/*3: */ {6, 5, 4, 3, 0, 1, 9, 2, 8, 7,},
/*3: */ {6, 5, 4, 3, 0, 1, 9, 8, 2, 7,},
/*3: */ {6, 5, 4, 3, 0, 1, 9, 8, 7, 2,},
/*3: */ {6, 5, 4, 3, 0, 2, 1, 9, 8, 7,},
/*3: */ {6, 5, 4, 3, 0, 2, 9, 1, 8, 7,},
/*3: */ {6, 5, 4, 3, 0, 2, 9, 8, 1, 7,},
/*3: */ {6, 5, 4, 3, 0, 2, 9, 8, 7, 1,},
/*3: */ {6, 5, 4, 3, 0, 9, 1, 2, 8, 7,},
/*3: */ {6, 5, 4, 3, 0, 9, 1, 8, 2, 7,},
/*3: */ {6, 5, 4, 3, 0, 9, 1, 8, 7, 2,},
/*3: */ {6, 5, 4, 3, 0, 9, 2, 1, 8, 7,},
/*3: */ {6, 5, 4, 3, 0, 9, 2, 8, 1, 7,},
/*3: */ {6, 5, 4, 3, 0, 9, 2, 8, 7, 1,},
/*3: */ {6, 5, 4, 3, 0, 9, 8, 1, 2, 7,},
/*3: */ {6, 5, 4, 3, 0, 9, 8, 1, 7, 2,},
/*3: */ {6, 5, 4, 3, 0, 9, 8, 2, 1, 7,},
/*3: */ {6, 5, 4, 3, 0, 9, 8, 2, 7, 1,},
/*3: */ {6, 5, 4, 3, 0, 9, 8, 7, 1, 2,},
/*3: */ {6, 5, 4, 3, 0, 9, 8, 7, 2, 1,},
/*3: */ {6, 5, 4, 1, 2, 0, 3, 9, 8, 7,},
/*3: */ {6, 5, 4, 1, 2, 3, 0, 9, 8, 7,},
/*3: */ {6, 5, 4, 1, 2, 3, 9, 0, 8, 7,},
/*3: */ {6, 5, 4, 2, 1, 0, 3, 9, 8, 7,},
/*3: */ {6, 5, 4, 2, 1, 3, 0, 9, 8, 7,},
/*3: */ {6, 5, 4, 2, 1, 3, 9, 0, 8, 7,},
/*3: */ {6, 5, 4, 0, 2, 1, 3, 9, 8, 7,},
/*3: */ {6, 5, 4, 0, 2, 3, 1, 9, 8, 7,},
/*3: */ {6, 5, 4, 0, 2, 3, 9, 1, 8, 7,},
/*3: */ {6, 5, 4, 0, 2, 3, 9, 8, 1, 7,},
/*3: */ {6, 5, 4, 0, 2, 3, 9, 8, 7, 1,},
/*3: */ {6, 5, 4, 2, 0, 1, 3, 9, 8, 7,},
/*3: */ {6, 5, 4, 2, 0, 3, 1, 9, 8, 7,},
/*3: */ {6, 5, 4, 2, 0, 3, 9, 1, 8, 7,},
/*3: */ {6, 5, 4, 2, 0, 3, 9, 8, 1, 7,},
/*3: */ {6, 5, 4, 2, 0, 3, 9, 8, 7, 1,},
/*3: */ {6, 5, 4, 0, 1, 2, 3, 9, 8, 7,},
/*3: */ {6, 5, 4, 0, 1, 3, 2, 9, 8, 7,},
/*3: */ {6, 5, 4, 0, 1, 3, 9, 2, 8, 7,},
/*3: */ {6, 5, 4, 0, 1, 3, 9, 8, 2, 7,},
/*3: */ {6, 5, 4, 0, 1, 3, 9, 8, 7, 2,},
/*3: */ {6, 5, 4, 1, 0, 2, 3, 9, 8, 7,},
/*3: */ {6, 5, 4, 1, 0, 3, 2, 9, 8, 7,},
/*3: */ {6, 5, 4, 1, 0, 3, 9, 2, 8, 7,},
/*3: */ {6, 5, 4, 1, 0, 3, 9, 8, 2, 7,},
/*3: */ {6, 5, 4, 1, 0, 3, 9, 8, 7, 2,},
/*4: */ {5, 4, 1, 2, 3, 0, 9, 8, 7, 6,},
/*4: */ {5, 4, 1, 2, 3, 9, 0, 8, 7, 6,},
/*4: */ {5, 4, 1, 3, 2, 0, 9, 8, 7, 6,},
/*4: */ {5, 4, 1, 3, 2, 9, 0, 8, 7, 6,},
/*4: */ {5, 4, 2, 1, 3, 0, 9, 8, 7, 6,},
/*4: */ {5, 4, 2, 1, 3, 9, 0, 8, 7, 6,},
/*4: */ {5, 4, 2, 3, 1, 0, 9, 8, 7, 6,},
/*4: */ {5, 4, 2, 3, 1, 9, 0, 8, 7, 6,},
/*4: */ {5, 4, 3, 1, 2, 0, 9, 8, 7, 6,},
/*4: */ {5, 4, 3, 1, 2, 9, 0, 8, 7, 6,},
/*4: */ {5, 4, 3, 2, 1, 0, 9, 8, 7, 6,},
/*4: */ {5, 4, 3, 2, 1, 9, 0, 8, 7, 6,},
/*4: */ {5, 4, 0, 2, 3, 1, 9, 8, 7, 6,},
/*4: */ {5, 4, 0, 2, 3, 9, 1, 8, 7, 6,},
/*4: */ {5, 4, 0, 2, 3, 9, 8, 1, 7, 6,},
/*4: */ {5, 4, 0, 2, 3, 9, 8, 7, 1, 6,},
/*4: */ {5, 4, 0, 2, 3, 9, 8, 7, 6, 1,},
/*4: */ {5, 4, 0, 3, 2, 1, 9, 8, 7, 6,},
/*4: */ {5, 4, 0, 3, 2, 9, 1, 8, 7, 6,},
/*4: */ {5, 4, 0, 3, 2, 9, 8, 1, 7, 6,},
/*4: */ {5, 4, 0, 3, 2, 9, 8, 7, 1, 6,},
/*4: */ {5, 4, 0, 3, 2, 9, 8, 7, 6, 1,},
/*4: */ {5, 4, 2, 0, 3, 1, 9, 8, 7, 6,},
/*4: */ {5, 4, 2, 0, 3, 9, 1, 8, 7, 6,},
/*4: */ {5, 4, 2, 0, 3, 9, 8, 1, 7, 6,},
/*4: */ {5, 4, 2, 0, 3, 9, 8, 7, 1, 6,},
/*4: */ {5, 4, 2, 0, 3, 9, 8, 7, 6, 1,},
/*4: */ {5, 4, 2, 3, 0, 1, 9, 8, 7, 6,},
/*4: */ {5, 4, 2, 3, 0, 9, 1, 8, 7, 6,},
/*4: */ {5, 4, 2, 3, 0, 9, 8, 1, 7, 6,},
/*4: */ {5, 4, 2, 3, 0, 9, 8, 7, 1, 6,},
/*4: */ {5, 4, 2, 3, 0, 9, 8, 7, 6, 1,},
/*4: */ {5, 4, 3, 0, 2, 1, 9, 8, 7, 6,},
/*4: */ {5, 4, 3, 0, 2, 9, 1, 8, 7, 6,},
/*4: */ {5, 4, 3, 0, 2, 9, 8, 1, 7, 6,},
/*4: */ {5, 4, 3, 0, 2, 9, 8, 7, 1, 6,},
/*4: */ {5, 4, 3, 0, 2, 9, 8, 7, 6, 1,},
/*4: */ {5, 4, 3, 2, 0, 1, 9, 8, 7, 6,},
/*4: */ {5, 4, 3, 2, 0, 9, 1, 8, 7, 6,},
/*4: */ {5, 4, 3, 2, 0, 9, 8, 1, 7, 6,},
/*4: */ {5, 4, 3, 2, 0, 9, 8, 7, 1, 6,},
/*4: */ {5, 4, 3, 2, 0, 9, 8, 7, 6, 1,},
/*4: */ {5, 4, 0, 1, 3, 2, 9, 8, 7, 6,},
/*4: */ {5, 4, 0, 1, 3, 9, 2, 8, 7, 6,},
/*4: */ {5, 4, 0, 1, 3, 9, 8, 2, 7, 6,},
/*4: */ {5, 4, 0, 1, 3, 9, 8, 7, 2, 6,},
/*4: */ {5, 4, 0, 1, 3, 9, 8, 7, 6, 2,},
/*4: */ {5, 4, 0, 3, 1, 2, 9, 8, 7, 6,},
/*4: */ {5, 4, 0, 3, 1, 9, 2, 8, 7, 6,},
/*4: */ {5, 4, 0, 3, 1, 9, 8, 2, 7, 6,},
/*4: */ {5, 4, 0, 3, 1, 9, 8, 7, 2, 6,},
/*4: */ {5, 4, 0, 3, 1, 9, 8, 7, 6, 2,},
/*4: */ {5, 4, 1, 0, 3, 2, 9, 8, 7, 6,},
/*4: */ {5, 4, 1, 0, 3, 9, 2, 8, 7, 6,},
/*4: */ {5, 4, 1, 0, 3, 9, 8, 2, 7, 6,},
/*4: */ {5, 4, 1, 0, 3, 9, 8, 7, 2, 6,},
/*4: */ {5, 4, 1, 0, 3, 9, 8, 7, 6, 2,},
/*4: */ {5, 4, 1, 3, 0, 2, 9, 8, 7, 6,},
/*4: */ {5, 4, 1, 3, 0, 9, 2, 8, 7, 6,},
/*4: */ {5, 4, 1, 3, 0, 9, 8, 2, 7, 6,},
/*4: */ {5, 4, 1, 3, 0, 9, 8, 7, 2, 6,},
/*4: */ {5, 4, 1, 3, 0, 9, 8, 7, 6, 2,},
/*4: */ {5, 4, 3, 0, 1, 2, 9, 8, 7, 6,},
/*4: */ {5, 4, 3, 0, 1, 9, 2, 8, 7, 6,},
/*4: */ {5, 4, 3, 0, 1, 9, 8, 2, 7, 6,},
/*4: */ {5, 4, 3, 0, 1, 9, 8, 7, 2, 6,},
/*4: */ {5, 4, 3, 0, 1, 9, 8, 7, 6, 2,},
/*4: */ {5, 4, 3, 1, 0, 2, 9, 8, 7, 6,},
/*4: */ {5, 4, 3, 1, 0, 9, 2, 8, 7, 6,},
/*4: */ {5, 4, 3, 1, 0, 9, 8, 2, 7, 6,},
/*4: */ {5, 4, 3, 1, 0, 9, 8, 7, 2, 6,},
/*4: */ {5, 4, 3, 1, 0, 9, 8, 7, 6, 2,},
/*4: */ {5, 4, 0, 1, 2, 3, 9, 8, 7, 6,},
/*4: */ {5, 4, 0, 2, 1, 3, 9, 8, 7, 6,},
/*4: */ {5, 4, 1, 0, 2, 3, 9, 8, 7, 6,},
/*4: */ {5, 4, 1, 2, 0, 3, 9, 8, 7, 6,},
/*4: */ {5, 4, 2, 0, 1, 3, 9, 8, 7, 6,},
/*4: */ {5, 4, 2, 1, 0, 3, 9, 8, 7, 6,},
/*5: */ {4, 0, 1, 2, 3, 9, 8, 7, 6, 5,},
/*5: */ {4, 0, 1, 3, 2, 9, 8, 7, 6, 5,},
/*5: */ {4, 0, 2, 1, 3, 9, 8, 7, 6, 5,},
/*5: */ {4, 0, 2, 3, 1, 9, 8, 7, 6, 5,},
/*5: */ {4, 0, 3, 1, 2, 9, 8, 7, 6, 5,},
/*5: */ {4, 0, 3, 2, 1, 9, 8, 7, 6, 5,},
/*5: */ {4, 1, 0, 2, 3, 9, 8, 7, 6, 5,},
/*5: */ {4, 1, 0, 3, 2, 9, 8, 7, 6, 5,},
/*5: */ {4, 1, 2, 0, 3, 9, 8, 7, 6, 5,},
/*5: */ {4, 1, 2, 3, 0, 9, 8, 7, 6, 5,},
/*5: */ {4, 1, 3, 0, 2, 9, 8, 7, 6, 5,},
/*5: */ {4, 1, 3, 2, 0, 9, 8, 7, 6, 5,},
/*5: */ {4, 2, 0, 1, 3, 9, 8, 7, 6, 5,},
/*5: */ {4, 2, 0, 3, 1, 9, 8, 7, 6, 5,},
/*5: */ {4, 2, 1, 0, 3, 9, 8, 7, 6, 5,},
/*5: */ {4, 2, 1, 3, 0, 9, 8, 7, 6, 5,},
/*5: */ {4, 2, 3, 0, 1, 9, 8, 7, 6, 5,},
/*5: */ {4, 2, 3, 1, 0, 9, 8, 7, 6, 5,},
/*5: */ {4, 3, 0, 1, 2, 9, 8, 7, 6, 5,},
/*5: */ {4, 3, 0, 2, 1, 9, 8, 7, 6, 5,},
/*5: */ {4, 3, 1, 0, 2, 9, 8, 7, 6, 5,},
/*5: */ {4, 3, 1, 2, 0, 9, 8, 7, 6, 5,},
/*5: */ {4, 3, 2, 0, 1, 9, 8, 7, 6, 5,},
/*5: */ {4, 3, 2, 1, 0, 9, 8, 7, 6, 5,},


    };

    private static final int[][] ORDERS_D_E_KTF = {

            /*0: */ {9, 8, 7, 6, 5, 4, 3, 2, 1, 0,},
            /*1: */ {0, 9, 8, 7, 6, 5, 4, 3, 2, 1,},
            /*2: */ {1, 0, 9, 8, 7, 6, 5, 4, 3, 2,},
            /*3: */ {2, 1, 0, 9, 8, 7, 6, 5, 4, 3,},
            /*4: */ {3, 2, 1, 0, 9, 8, 7, 6, 5, 4,},
            /*9: */ {8, 7, 6, 5, 4, 3, 2, 1, 0, 9,},
            /*8: */ {7, 6, 5, 4, 3, 2, 1, 0, 9, 8,},
            /*7: */ {6, 5, 4, 3, 2, 1, 0, 9, 8, 7,},
            /*6: */ {5, 4, 3, 2, 1, 0, 9, 8, 7, 6,},
            /*5: */ {4, 3, 2, 1, 0, 9, 8, 7, 6, 5,},
    };

    private static final HashMap<String, Double> scores = ranks();

    public static int[] bestWheelOrderDE(Model model, WheelSetting[] wheelSettings, boolean ktf, boolean print) {

        int[] wheels = new int[10];

        if (model != Model.T52D && model != Model.T52E) {
            throw new RuntimeException("Supported only for D and E");
        }
        final String[] OPTIMAL_T52E_WHEEL_STRINGS = CribAttackSturgeon.OPTIMAL_E_ORDER.split(":");
        final HashMap<String, Integer> OPTIMAL_T52E_WHEEL_POSITIONS = new HashMap<>();
        for (int wj = 0; wj < 10; wj++) {
            OPTIMAL_T52E_WHEEL_POSITIONS.put(OPTIMAL_T52E_WHEEL_STRINGS[wj], wj);
        }

        double bestRank = 1000.0;
        int[] bestOrder = null;
        for (int[] order : ktf ? ORDERS_D_E_KTF : ORDERS_D_E) {

            if (!ktf && order[0] == Wheels.K && order[1] == Wheels.J) {
                // This is because in non-ktf mode, K and J do not share any of the two inputs, so
                // we must test all 4 possible moves. With other combinations, any two first wheels
                // in the order share an input, one with a positive value, one with the inverse value.
                // Therefore, as the formulae are all with OR clauses, those two wheels cannot
                // stop at the same time, and it is enough to check 3 options:
                // - both move
                // - the first moves, the second stops.
                // - the first stops, the seconds moves.
                continue;
            }

            double score; // the lower, the better.

            if (model == Model.T52D) {
                StringBuilder xor1Perm0String = getXorPermString(wheelSettings, order);
                if (!scores.containsKey(xor1Perm0String.toString())) {
                    continue;
                }
                score = scores.get(xor1Perm0String.toString());
            } else {
                //III:5:9:IV:1:I:3:II:V:7
                score = 0;
                for (int wheelPosition = 0; wheelPosition < 10; wheelPosition++) {
                    int w = order[wheelPosition];
                    int optimalWheelPosition = OPTIMAL_T52E_WHEEL_POSITIONS.get(wheelSettings[w].toString());
                    if (optimalWheelPosition < 5) {
                        score += Math.abs(wheelPosition - optimalWheelPosition);
                    }
                }
            }
            if (score < bestRank) {
                bestRank = score;
                bestOrder = order;
            }
        }
        System.arraycopy(bestOrder, 0, wheels, 0, 10);


        StringBuilder orderS = new StringBuilder();
        StringBuilder orderedWheelsS = new StringBuilder();
        for (int w : wheels) {
            orderS.append(w);
            orderedWheelsS.append(wheelSettings[w]).append(":");
        }
        StringBuilder origWheelsS = new StringBuilder();
        for (int w = 0; w < 10; w++) {
            origWheelsS.append(wheelSettings[w]).append(":");
        }
        if (print) {
            System.out.printf("%s Order: %s = %s (%s) %s %f\n", model, orderS, orderedWheelsS, origWheelsS,
                    getXorPermString(wheelSettings, wheels).toString().replaceAll("0", "p").replaceAll("1", "X"), bestRank);
        }

        //return new int[] {9,8,7,6,5,4,3,2,1,0};
        return wheels;
    }

    private static int checkRuleD_E(int[] wheels, int[][][] allRulesD_E) {
        for (int o = 0; o < allRulesD_E.length; o++) {
            boolean good = true;
            for (int i = 0; i < 10; i++) {
                for (int j = i + 1; j < 10; j++) {
                    for (int succ : allRulesD_E[o][wheels[j]]) {
                        if (succ == wheels[i]) {
                            good = false;
                            break;
                        }
                    }
                }
                if (!good) {
                    break;
                }
            }
            if (good) {
                return o;
            }
        }
        return -1;
    }

    private static StringBuilder getXorPermString(WheelSetting[] wheelSettings, int[] order) {
        StringBuilder key = new StringBuilder();
        for (int wi = 0; wi < 10; wi++) {
            int w = order[wi];
            key.append((wheelSettings[w].getFunction() == WheelSetting.WheelFunction.XOR) ? "1" : "0");
        }
        return key;
    }

    private static void printAllRulesD_E(boolean ktf) {
        String[] optionsNoKtf = {
                "9876543,40,41,42",
                "8765439,40,41,42",
                "7654398,408,41,42",
                "6543987,408,41,42",
                "5439876,408,41,42",
                "4398765,408,41,42",
        };
        String[] optionsKtf = {
                "9876543210",
                "0987654321",
                "1098765432",
                "2109876543",
                "3210987654",
                "4321098765",
                "5432109876",
                "6543210987",
                "7654321098",
                "8765432109",

        };
        int[][][] allRules = getAllRulesD_E(ktf ? optionsKtf : optionsNoKtf);

        int[] wheels = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        int[] w0 = new int[5];
        int[] w1 = new int[5];
        int[] counts = new int[allRules.length];
        for (int partition10Index = 0; partition10Index < Partition10.PARTITIONS.length; partition10Index++) {
            for (int perm5_0 = 0; perm5_0 < Perms.PERMS[5].length; perm5_0++) {
                Partition10.getSelection(partition10Index, 0, perm5_0, w0);
                System.arraycopy(w0, 0, wheels, 0, 5);
                for (int perm5_1 = 0; perm5_1 < Perms.PERMS[5].length; perm5_1++) {
                    Partition10.getSelection(partition10Index, 1, perm5_1, w1);
                    System.arraycopy(w1, 0, wheels, 5, 5);
                    int rule = checkRuleD_E(wheels, allRules);
                    if (rule != -1) {
                        System.out.printf("/*%d: */ {", rule);
                        for (int w : wheels) {
                            System.out.printf("%d,", w);
                        }
                        System.out.print("},\n");
                        counts[rule]++;
                    }
                }
            }
        }
        for (int o = 0; o < 6; o++) {
            System.out.printf("%d: %3d\n", o, counts[o]);
        }
    }

    private static int[][][] getAllRulesD_E(String[] options) {

        int[][][] allRules = new int[options.length][10][];
        for (int o = 0; o < options.length; o++) {
            String option = options[o];
            int len = option.length();
            for (int first = 0; first < 10; first++) {
                ArrayList<Integer> succList = new ArrayList<>();

                boolean match = false;
                for (int i = 0; i < len; i++) {
                    char c = option.charAt(i);
                    int digit = Utils.digit(c);
                    if (!match) {
                        if (digit == first) {
                            match = true;
                        }
                    } else {
                        if (digit != -1) {
                            succList.add(digit);
                        }
                        match = false;
                    }
                }

                allRules[o][first] = new int[succList.size()];
                for (int i = 0; i < succList.size(); i++) {
                    allRules[o][first][i] = succList.get(i);
                }
            }
        }
        return allRules;
    }

    private static HashMap<String, Double> ranks() {
        String[] orders = {OrdersRaw.order1, OrdersRaw.order2, OrdersRaw.order3, OrdersRaw.order4, OrdersRaw.order5, OrdersRaw.order6, OrdersRaw.order7};

        ArrayList<ArrayList<String>> ordersList = new ArrayList<>();
        for (String orderStr : orders) {
            HashMap<String, Double> map = new HashMap<>();
            ArrayList<String> list = new ArrayList<>();
            for (String entry : orderStr.split("\n")) {
                String[] split = entry.split(",");
                String key = split[0];
                double value = Double.parseDouble(split[1]);
                map.put(key, value);
                list.add(key);
            }
            list.sort((o1, o2) -> (int) ((map.get(o1) - map.get(o2)) * 1000000.0));
            ordersList.add(list);
        }

        HashMap<String, Integer> rankSum = new HashMap<>();
        HashMap<String, Integer> counts = new HashMap<>();
        HashMap<String, Double> avgRanks = new HashMap<>();

        for (ArrayList<String> list : ordersList) {
            for (int i = 0; i < list.size(); i++) {
                String key = list.get(i);
                rankSum.put(key, rankSum.getOrDefault(key, 0) + i);
                counts.put(key, counts.getOrDefault(key, 0) + 1);
            }
        }
        ArrayList<String> list = ordersList.get(0);
        for (String key : list) {
            avgRanks.put(key, (1.0 * rankSum.get(key)) / counts.get(key));
        }
        avgRanks.put("0000011111", 252.0);
        return avgRanks;
    }

    private static HashMap<String, Double> ranksNew() {
        String[] orders = {OrdersRaw.order1, OrdersRaw.order2, OrdersRaw.order3, OrdersRaw.order4, OrdersRaw.order5, OrdersRaw.order6, OrdersRaw.order7};

        HashMap<String, Double> rankSum = new HashMap<>();
        HashMap<String, Integer> counts = new HashMap<>();
        HashMap<String, Double> avgRanks = new HashMap<>();


        for (String orderStr : orders) {
            for (String entry : orderStr.split("\n")) {
                String[] split = entry.split(",");
                String key = split[0];
                double value = Double.parseDouble(split[1]);
                rankSum.put(key, rankSum.getOrDefault(key, 0.0) + value);
                counts.put(key, counts.getOrDefault(key, 0) + 1);

            }
        }

        for (String key : rankSum.keySet()) {
            avgRanks.put(key, (1.0 * rankSum.get(key)) / counts.get(key));
        }
        avgRanks.put("0000011111", 252.0);
        return avgRanks;
    }


    public static void main(String[] args) {
        String wheelPositionsString = "01:02:03:04:05:06:07:08:09:10";
        String wheelSettingsABDStringFilm = "7-10:III:2-6:I:V:4-9:II:3-8:IV:1-5";
        String wheelSettingsABDStringFilm2 = "7-10:4-9:II:3-8:IV:1-5:III:2-6:I:V";
        String wheelSettingsABDString = "1-2:3-4:5-6:7-8:9-10:I:II:III:IV:V"; // equivalent to simple
        String wheelSettingsABDString2 = "IV:V:I:II:III:7-8:9-10:1-2:3-4:5-6";
        String wheelSettingsABDString3 = "7-8:IV:V:I:1-2:9-10:II:III:3-4:5-6";

        Key keyd = new Key("T52D", wheelPositionsString, wheelSettingsABDString);
        Key keyd2 = new Key("T52D", wheelPositionsString, wheelSettingsABDString2);
        Key keydFilm = new Key("T52D", wheelPositionsString, wheelSettingsABDStringFilm);
        Key keydFilm2 = new Key("T52D", wheelPositionsString, wheelSettingsABDStringFilm2);
        Key keydFilm3 = new Key("T52D", wheelPositionsString, wheelSettingsABDString3);
        Key keydE = new Key("T52E", wheelPositionsString, "7:3:III:II:1:5:I:IV:V:9");


        bestWheelOrderDE(keyd.model, keyd.wheelSettings, keyd.ktf, true);
        bestWheelOrderDE(keyd2.model, keyd2.wheelSettings, keyd2.ktf, true);
        bestWheelOrderDE(keydFilm.model, keydFilm.wheelSettings, keydFilm.ktf, true);
        bestWheelOrderDE(keydFilm2.model, keydFilm2.wheelSettings, keydFilm2.ktf, true);
        bestWheelOrderDE(keydFilm3.model, keydFilm3.wheelSettings, keydFilm3.ktf, true);
        bestWheelOrderDE(keydE.model, keydE.wheelSettings, keydE.ktf, true);



        //printAllRulesD_E(false);
    }

}
